<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="A layout example that shows off a responsive email layout.">

    <title>Email &ndash; Layout Examples &ndash; Pure</title>

<link rel="stylesheet" href="http://yui.yahooapis.com/pure/0.4.2/pure.css">



  
    <!--[if lte IE 8]>
        <link rel="stylesheet" href="css/layouts/email-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="css/layouts/email.css">
    <!--<![endif]-->
  

</head>
<body>
<div id="layout" class="content pure-g">
    <div id="nav" class="pure-u">
        <a href="#" class="nav-menu-button">Menu</a>

        <div class="nav-inner">
			<div id="demo" class="yui3-skin-sam yui3-g" style="font-size: 35%;" > <!-- You need this skin class -->
				<div id="mycalendar"></div>
			</div>
            <button class="primary-button pure-button">Compose</button>

            <div class="pure-menu pure-menu-open">
                <ul>
                    <li><a href="#">Inbox <span class="email-count">(2)</span></a></li>
                    <li><a href="#">Important</a></li>
                    <li><a href="#">Sent</a></li>
                    <li><a href="#">Drafts</a></li>
                    <li><a href="#">Trash</a></li>
                    <li class="pure-menu-heading">Labels</li>
                    <li><a href="#"><span class="email-label-personal"></span>Personal</a></li>
                    <li><a href="#"><span class="email-label-work"></span>Work</a></li>
                    <li><a href="#"><span class="email-label-travel"></span>Travel</a></li>
                </ul>
            </div>
        </div>
    </div>

				<%= yield %>
</div>

<script src="http://yui.yahooapis.com/3.14.1/build/yui/yui.js"></script>

	<script>
		YUI({
		    groups: {
		        'jquery': {
		            base: 'http://ajax.googleapis.com/ajax/libs/',
		            async: false,
		            modules: {
		                'jquery': {
		                    path: 'jquery/1.7/jquery.min.js'
		                },
		                'jquery-ui': {
		                    path: 'jqueryui/1.8/jquery-ui.min.js',
		                    requires: ['jquery', 'jquery-ui-css']
		                },
		                'jquery-ui-css': {
		                    path: 'jqueryui/1.8/themes/base/jquery-ui.css',
		                    type: 'css'
		                }
		            }
		        },
		
			    "d3lib": {
			      base: "http://d3js.org/",  //the modules of this group will be downloaded from there
		          async: false,
			      modules: {
			        "d3": {
			          path:"d3.v2.js",   // base + path = http://d3js.org/d3.v2.js
					  requires: ['d3']
			        },
			        "d3fake": {  //another module of the "d3lib" group
			          path:"d3fake.js"  
			        }
			      }
			    }
		
		    }
		}).use('d3', function (Y) {
			// basice d3
			//Width and height
			var w = 600;
			var h = 250;
			
			var dataset = [ 5, 10, 13, 19, 21, 25, 22, 18, 15, 13,
							11, 12, 15, 20, 18, 17, 16, 18, 23, 25 ];

			var xScale = d3.scale.ordinal()
							.domain(d3.range(dataset.length))
							.rangeRoundBands([0, w], 0.05);

			var yScale = d3.scale.linear()
							.domain([0, d3.max(dataset)])
							.range([0, h]);
			
			//Create SVG element
			var svg = d3.select("#carlgraph")
						.append("svg")
						.attr("width", w)
						.attr("height", h);

			//Create bars
			svg.selectAll("rect")
			   .data(dataset)
			   .enter()
			   .append("rect")
			   .attr("x", function(d, i) {
			   		return xScale(i);
			   })
			   .attr("y", function(d) {
			   		return h - yScale(d);
			   })
			   .attr("width", xScale.rangeBand())
			   .attr("height", function(d) {
			   		return yScale(d);
			   })
			   .attr("fill", function(d) {
					return "rgb(0, 0, " + (d * 10) + ")";
			   })
			   .on("mouseover", function(d) {

					//Get this bar's x/y values, then augment for the tooltip
					var xPosition = parseFloat(d3.select(this).attr("x")) + xScale.rangeBand() / 2;
					var yPosition = parseFloat(d3.select(this).attr("y")) / 2 + h / 2;

					//Update the tooltip position and value
					d3.select("#tooltip")
						.style("left", xPosition + "px")
						.style("top", yPosition + "px")						
						.select("#value")
						.text(d);
			   
					//Show the tooltip
					d3.select("#tooltip").classed("hidden", false);

			   })
			   .on("mouseout", function() {
			   
					//Hide the tooltip
					d3.select("#tooltip").classed("hidden", true);
					
			   })
			   .on("click", function() {
			   		sortBars();
			   });

			//Define sort order flag
			var sortOrder = false;
			
			//Define sort function
			var sortBars = function() {

				//Flip value of sortOrder
			   	sortOrder = !sortOrder;

				svg.selectAll("rect")
				   .sort(function(a, b) {
				   		if (sortOrder) {
					   		return d3.ascending(a, b);
				   		} else {
					   		return d3.descending(a, b);
				   		}
				   	})
				   .transition()
				   .delay(function(d, i) {
					   return i * 50;
				   })
				   .duration(1000)
				   .attr("x", function(d, i) {
				   		return xScale(i);
				   });

			};			

			
		});
		
	</script>
	<script>
	    YUI().use('node-base', 'node-event-delegate', function (Y) {

	        var menuButton = Y.one('.nav-menu-button'),
	            nav        = Y.one('#nav');

	        // Setting the active class name expands the menu vertically on small screens.
	        menuButton.on('click', function (e) {
	            nav.toggleClass('active');
	        });

	        // Your application code goes here...
		

	    });
	</script>
<script>
YUI().use('node-base', 'node-event-delegate', function (Y) {
    // This just makes sure that the href="#" attached to the <a> elements
    // don't scroll you back up the page.
    Y.one('body').delegate('click', function (e) {
        e.preventDefault();
    }, 'a[href="#"]');
});
</script>
	<!-- Script to render calendar, lifted from http://yuilibrary.com/yui/docs/calendar/calendar-simple.html  -->
	<script type="text/javascript">
	YUI().use('calendar', 'datatype-date', 'cssbutton',  function(Y) {

	    // Create a new instance of calendar, placing it in 
	    // #mycalendar container, setting its width to 85px,
	    // the flags for showing previous and next month's 
	    // dates in available empty cells to true, and setting 
	    // the date to today's date.          
	    var calendar = new Y.Calendar({
	      contentBox: "#mycalendar",
	      width:'133px',
	      showPrevMonth: true,
	      showNextMonth: true,
	      date: new Date()}).render();

	    // Get a reference to Y.DataType.Date
	    var dtdate = Y.DataType.Date;

	    // Listen to calendar's selectionChange event.
	    calendar.on("selectionChange", function (ev) {

	      // Get the date from the list of selected
	      // dates returned with the event (since only
	      // single selection is enabled by default,
	      // we expect there to be only one date)
	      var newDate = ev.newSelection[0];

	      // Format the date and output it to a DOM
	      // element.
	      Y.one("#selecteddate").setHTML(dtdate.format(newDate));
	    });


	    // When the 'Show Previous Month' link is clicked,
	    // modify the showPrevMonth property to show or hide
	    // previous month's dates
	    Y.one("#togglePrevMonth").on('click', function (ev) {
	      ev.preventDefault();
	      calendar.set('showPrevMonth', !(calendar.get("showPrevMonth")));      
	    });

	    // When the 'Show Next Month' link is clicked,
	    // modify the showNextMonth property to show or hide
	    // next month's dates
	    Y.one("#toggleNextMonth").on('click', function (ev) {
	      ev.preventDefault();
	      calendar.set('showNextMonth', !(calendar.get("showNextMonth")));      
	    });
	});
	</script>
	
</body>
</html>
